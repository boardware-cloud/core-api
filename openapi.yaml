openapi: 3.0.3
info:
  title: BoardWare Cloud APIs
  description: |-
    BoardWare cloud console api
  contact:
    email: dan.chen@boardware.com
  version: 0.0.4
servers:
  - url: http://localhost/api/v1
tags:
  - name: Account
  - name: Services
  - name: Verification
  - name: Ticket
paths:
  /tickets:
    post:
      operationId: CreateTicket
      tags:
        - Ticket
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTicketRequest'
      responses:
        '201':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ticket'
  /account:
    get:
      tags:
        - Account
      description: Get account detail
      operationId: GetAccount
      responses:
        '200':
          description: Success get account detail
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
  /account/totp:
    put:
      tags:
        - Account
      description: Create or Update 2FA of TOTP
      operationId: CreateTotp2FA
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutTotpRequest'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Totp'
  /account/session:
    post:
      tags:
        - Account
      description: Create Login session
      operationId: CreateSession
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateSessionRequest'
      responses:
        '201':
          description: 'Account created'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Session'
  /account/password:
    put:
      tags:
        - Account
      operationId: UpdatePassword
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatePasswordRequest'
      responses:
        '204':
          description: 'Updated'
        '403':
          description: 'Fail'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /accounts:
    post:
      tags:
        - Account
      description: Create user account
      operationId: CreateAccount
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAccountRequest'
      responses:
        '201':
          description: 'Account created'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
        '403':
          description: 'Verification Code error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    get:
      tags:
        - Account
      description: Create user account
      operationId: ListAccount
      parameters:
        - $ref: '#/components/parameters/Ordering'
        - $ref: '#/components/parameters/IndexParam'
        - $ref: '#/components/parameters/LimitParam'
      responses:
        '200':
          description: 'Account created'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountList'
  /accounts/session/verification:
    get:
      tags:
        - Account
      description: 'Verify jwt'
      operationId: VerifySession
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SessionVerificationRequest'
      responses:
        '200':
          description: 'Verification'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Session'
  /services:
    post:
      tags:
        - Services
      description: Create service
      operationId: CreateService
      responses:
        '201':
          description: 'Success created service'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Service'
    get:
      tags:
        - Services
      operationId: ListServices
      description: List services
      responses:
        '200':
          description: 'Success list services'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceList'
  /verification/code:
    post:
      operationId: CreateVerificationCode
      tags:
        - Verification
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateVerificationCodeRequest'
      responses:
        '201':
          description: 'Success create verification code'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateVerificationCodeRespones'
        '409':
          description: 'Failed create verification code'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
components:
  schemas:
    Error:
      type: object
      required:
        - statusCode
        - code
        - message
      properties:
        statusCode:
          type: integer
          format: int64
        code:
          type: integer
          format: int64
        message:
          type: string
    SessionVerificationRequest:
      description: 'Session verification request'
      type: object
      required:
        - token
      properties:
        token:
          type: string
    VerificationCodeResult:
      type: string
      enum: [SUCCESS_CREATED,FREQUENT,ACCOUNT_EXISTS]
    VerificationCodePurpose:
      type: string
      enum: [CREATE_ACCOUNT,SET_PASSWORD,SIGNIN,CREATE_2FA,TICKET]
    CreateVerificationCodeRequest:
      type: object
      required:
        - purpose
      properties:
        email:
          type: string
        purpose:
          $ref: '#/components/schemas/VerificationCodePurpose'
    UpdatePasswordRequest:
      type: object
      required:
        - email
        - newPassword
      properties:
        email:
          type: string
        verificationCode:
          type: string
        password:
          type: string
        newPassword:
          type: string
    CreateVerificationCodeRespones:
      type: object
      required:
        - purpose
        - result
      properties:
        email:
          type: string
        purpose:
          $ref: '#/components/schemas/VerificationCodePurpose'
        result:
          $ref: '#/components/schemas/VerificationCodeResult'
    CreateSessionRequest:
      description: 'Login request'
      type: object
      properties:
        email:
          type: string
        password:
          type: string
        totpCode:
          type: string
        verificationCode:
          type: string
        tickets:
          type: array
          items:
            type: string
    CreateAccountRequest:
      description: 'Create account request schema'
      required:
        - email
        - password
      type: object
      properties:
        verificationCode:
          type: string
        email:
          type: string
        password:
          type: string
        role:
          $ref: '#/components/schemas/Role'
    Role:
      type: string
      enum: [ROOT, ADMIN, USER]
    CreateTicketRequest:
      type: object
      required:
        - email
        - type
      properties:
        email:
          type: string
        type:
          $ref: '#/components/schemas/TicketType'
        password:
          type: string
        totpCode:
          type: string
        verificationCode:
          type: string
    TicketType:
      type: string
      enum: [PASSWORD, EMAIL, TOTP]
    Ticket:
      type: object
      properties:
        token:
          type: string
        type:
          $ref: '#/components/schemas/TicketType'
    Account:
      type: object
      required:
        - id
        - email
        - role
      properties:
        id:
          type: string
        email:
          type: string
        role:
          $ref: '#/components/schemas/Role'
    AccountList:
      description: 'Account list'
      type: object
      required:
        - data
        - pagination
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Account'
        pagination:
          $ref: '#/components/schemas/Pagination'
    PutTotpRequest:
      type: object
      required:
        - verificationCode
      properties:
        verificationCode:
          type: string
    Totp:
      type: object
      required:
        - url
      properties:
        url:
          type: string
    Service:
      type: object
      required:
        - id
        - name
        - type
        - title
        - description
        - url
      properties:
        id:
          type: string
        name:
          type: string
        title:
          type: string
        description:
          type: string
        url:
          type: string
        type:
          $ref: '#/components/schemas/ServiceType'
    CreateServiceRequest:
      type: object
      required:
        - name
        - title
        - description
        - url
        - type
      properties:
        name:
          type: string
        title:
          type: string
        description:
          type: string
        url:
          type: string
        type:
          $ref: '#/components/schemas/ServiceType'
    ServiceType:
      type: string
      enum: ['IAAS', 'PAAS', 'SAAS']
    ServiceList:
      description: 'Service list'
      type: object
      required:
        - data
        - pagination
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Service'
        pagination:
          $ref: '#/components/schemas/Pagination'
    Session:
      type: object
      required:
        - status
        - account
        - token
        - tokenType
        - tokenFormat
        - expiredAt
        - createdAt
        - fa
      properties:
        status:
          $ref: '#/components/schemas/SessionStatus'
        account:
          $ref: '#/components/schemas/Account'
        token:
          type: string
        tokenType:
          type: string
          default: Bearer
        tokenFormat:
          type: string
          default: jwt
        expiredAt:
          type: integer
          format: int64
        createdAt:
          type: integer
          format: int64
        fa:
          type: array
          items:
            type: string
    SessionStatus:
      type: string
      enum: ['ACTIVED', 'TWO_FA','EXPIRED', 'DISACTIVED']
    SessionVerification:
      required:
        - status
      type: object
      properties:
        status:
          $ref: '#/components/schemas/SessionStatus'
    Ordering:
      description: 'Ordering'
      type: string
      enum: [ASCENDING, DESCENDING]
    Pagination:
      description: 'Pagination'
      type: object
      required:
        - index
        - limit
        - total
      properties:
        index:
          type: integer
          format: int64
          description: 'Current page'
        limit:
          type: integer
          format: int64
          description: 'Amount per page'
        total:
          type: integer
          format: int64
          description: 'Total page'
  parameters:
    Ordering:
      name: ordering
      description: 'ASCENDING or DESCENDING'
      in: query
      schema:
        $ref: '#/components/schemas/Ordering'
    IndexParam:
      name: index
      in: query
      description: 'Current page index'
      schema:
        type: integer
        minimum: 0
        default: 0
    LimitParam:
      name: limit
      in: query
      description: 'Total pages'
      schema:
        type: integer
        minimum: 1
        default: 10
