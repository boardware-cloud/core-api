/* tslint:disable */
/* eslint-disable */
/**
 * BoardWare Cloud APIs
 * BoardWare cloud console api
 *
 * The version of the OpenAPI document: 0.0.12
 * Contact: dan.chen@boardware.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { VerificationCodePurpose } from './VerificationCodePurpose';
import {
    VerificationCodePurposeFromJSON,
    VerificationCodePurposeFromJSONTyped,
    VerificationCodePurposeToJSON,
} from './VerificationCodePurpose';
import type { VerificationCodeResult } from './VerificationCodeResult';
import {
    VerificationCodeResultFromJSON,
    VerificationCodeResultFromJSONTyped,
    VerificationCodeResultToJSON,
} from './VerificationCodeResult';

/**
 * 
 * @export
 * @interface CreateVerificationCodeRespones
 */
export interface CreateVerificationCodeRespones {
    /**
     * 
     * @type {string}
     * @memberof CreateVerificationCodeRespones
     */
    email?: string;
    /**
     * 
     * @type {VerificationCodePurpose}
     * @memberof CreateVerificationCodeRespones
     */
    purpose: VerificationCodePurpose;
    /**
     * 
     * @type {VerificationCodeResult}
     * @memberof CreateVerificationCodeRespones
     */
    result: VerificationCodeResult;
}

/**
 * Check if a given object implements the CreateVerificationCodeRespones interface.
 */
export function instanceOfCreateVerificationCodeRespones(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "purpose" in value;
    isInstance = isInstance && "result" in value;

    return isInstance;
}

export function CreateVerificationCodeResponesFromJSON(json: any): CreateVerificationCodeRespones {
    return CreateVerificationCodeResponesFromJSONTyped(json, false);
}

export function CreateVerificationCodeResponesFromJSONTyped(json: any, ignoreDiscriminator: boolean): CreateVerificationCodeRespones {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'email': !exists(json, 'email') ? undefined : json['email'],
        'purpose': VerificationCodePurposeFromJSON(json['purpose']),
        'result': VerificationCodeResultFromJSON(json['result']),
    };
}

export function CreateVerificationCodeResponesToJSON(value?: CreateVerificationCodeRespones | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'email': value.email,
        'purpose': VerificationCodePurposeToJSON(value.purpose),
        'result': VerificationCodeResultToJSON(value.result),
    };
}

