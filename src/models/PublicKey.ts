/* tslint:disable */
/* eslint-disable */
/**
 * BoardWare Cloud APIs
 * BoardWare cloud console api
 *
 * The version of the OpenAPI document: 0.0.12
 * Contact: dan.chen@boardware.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { AuthenticatorSelection } from './AuthenticatorSelection';
import {
    AuthenticatorSelectionFromJSON,
    AuthenticatorSelectionFromJSONTyped,
    AuthenticatorSelectionToJSON,
} from './AuthenticatorSelection';
import type { PubKeyCredParam } from './PubKeyCredParam';
import {
    PubKeyCredParamFromJSON,
    PubKeyCredParamFromJSONTyped,
    PubKeyCredParamToJSON,
} from './PubKeyCredParam';
import type { Rp } from './Rp';
import {
    RpFromJSON,
    RpFromJSONTyped,
    RpToJSON,
} from './Rp';
import type { WebauthnUser } from './WebauthnUser';
import {
    WebauthnUserFromJSON,
    WebauthnUserFromJSONTyped,
    WebauthnUserToJSON,
} from './WebauthnUser';

/**
 * 
 * @export
 * @interface PublicKey
 */
export interface PublicKey {
    /**
     * 
     * @type {Rp}
     * @memberof PublicKey
     */
    rp: Rp;
    /**
     * 
     * @type {WebauthnUser}
     * @memberof PublicKey
     */
    user: WebauthnUser;
    /**
     * 
     * @type {string}
     * @memberof PublicKey
     */
    challenge: string;
    /**
     * 
     * @type {Array<PubKeyCredParam>}
     * @memberof PublicKey
     */
    pubKeyCredParams: Array<PubKeyCredParam>;
    /**
     * 
     * @type {number}
     * @memberof PublicKey
     */
    timeout: number;
    /**
     * 
     * @type {AuthenticatorSelection}
     * @memberof PublicKey
     */
    authenticatorSelection: AuthenticatorSelection;
}

/**
 * Check if a given object implements the PublicKey interface.
 */
export function instanceOfPublicKey(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "rp" in value;
    isInstance = isInstance && "user" in value;
    isInstance = isInstance && "challenge" in value;
    isInstance = isInstance && "pubKeyCredParams" in value;
    isInstance = isInstance && "timeout" in value;
    isInstance = isInstance && "authenticatorSelection" in value;

    return isInstance;
}

export function PublicKeyFromJSON(json: any): PublicKey {
    return PublicKeyFromJSONTyped(json, false);
}

export function PublicKeyFromJSONTyped(json: any, ignoreDiscriminator: boolean): PublicKey {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'rp': RpFromJSON(json['rp']),
        'user': WebauthnUserFromJSON(json['user']),
        'challenge': json['challenge'],
        'pubKeyCredParams': ((json['pubKeyCredParams'] as Array<any>).map(PubKeyCredParamFromJSON)),
        'timeout': json['timeout'],
        'authenticatorSelection': AuthenticatorSelectionFromJSON(json['authenticatorSelection']),
    };
}

export function PublicKeyToJSON(value?: PublicKey | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'rp': RpToJSON(value.rp),
        'user': WebauthnUserToJSON(value.user),
        'challenge': value.challenge,
        'pubKeyCredParams': ((value.pubKeyCredParams as Array<any>).map(PubKeyCredParamToJSON)),
        'timeout': value.timeout,
        'authenticatorSelection': AuthenticatorSelectionToJSON(value.authenticatorSelection),
    };
}

