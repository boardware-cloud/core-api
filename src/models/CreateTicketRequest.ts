/* tslint:disable */
/* eslint-disable */
/**
 * BoardWare Cloud APIs
 * BoardWare cloud console api
 *
 * The version of the OpenAPI document: 0.0.12
 * Contact: dan.chen@boardware.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { TicketType } from './TicketType';
import {
    TicketTypeFromJSON,
    TicketTypeFromJSONTyped,
    TicketTypeToJSON,
} from './TicketType';

/**
 * 
 * @export
 * @interface CreateTicketRequest
 */
export interface CreateTicketRequest {
    /**
     * 
     * @type {string}
     * @memberof CreateTicketRequest
     */
    email: string;
    /**
     * 
     * @type {TicketType}
     * @memberof CreateTicketRequest
     */
    type: TicketType;
    /**
     * 
     * @type {string}
     * @memberof CreateTicketRequest
     */
    password?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateTicketRequest
     */
    totpCode?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateTicketRequest
     */
    verificationCode?: string;
}

/**
 * Check if a given object implements the CreateTicketRequest interface.
 */
export function instanceOfCreateTicketRequest(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "email" in value;
    isInstance = isInstance && "type" in value;

    return isInstance;
}

export function CreateTicketRequestFromJSON(json: any): CreateTicketRequest {
    return CreateTicketRequestFromJSONTyped(json, false);
}

export function CreateTicketRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): CreateTicketRequest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'email': json['email'],
        'type': TicketTypeFromJSON(json['type']),
        'password': !exists(json, 'password') ? undefined : json['password'],
        'totpCode': !exists(json, 'totpCode') ? undefined : json['totpCode'],
        'verificationCode': !exists(json, 'verificationCode') ? undefined : json['verificationCode'],
    };
}

export function CreateTicketRequestToJSON(value?: CreateTicketRequest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'email': value.email,
        'type': TicketTypeToJSON(value.type),
        'password': value.password,
        'totpCode': value.totpCode,
        'verificationCode': value.verificationCode,
    };
}

