/* tslint:disable */
/* eslint-disable */
/**
 * BoardWare Cloud APIs
 * BoardWare cloud console api
 *
 * The version of the OpenAPI document: 0.0.12
 * Contact: dan.chen@boardware.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Account } from './Account';
import {
    AccountFromJSON,
    AccountFromJSONTyped,
    AccountToJSON,
} from './Account';
import type { SessionStatus } from './SessionStatus';
import {
    SessionStatusFromJSON,
    SessionStatusFromJSONTyped,
    SessionStatusToJSON,
} from './SessionStatus';

/**
 * 
 * @export
 * @interface Session
 */
export interface Session {
    /**
     * 
     * @type {SessionStatus}
     * @memberof Session
     */
    status: SessionStatus;
    /**
     * 
     * @type {Account}
     * @memberof Session
     */
    account: Account;
    /**
     * 
     * @type {string}
     * @memberof Session
     */
    token: string;
    /**
     * 
     * @type {string}
     * @memberof Session
     */
    tokenType: string;
    /**
     * 
     * @type {string}
     * @memberof Session
     */
    tokenFormat: string;
    /**
     * 
     * @type {number}
     * @memberof Session
     */
    expiredAt: number;
    /**
     * 
     * @type {number}
     * @memberof Session
     */
    createdAt: number;
    /**
     * 
     * @type {Array<string>}
     * @memberof Session
     */
    fa: Array<string>;
}

/**
 * Check if a given object implements the Session interface.
 */
export function instanceOfSession(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "status" in value;
    isInstance = isInstance && "account" in value;
    isInstance = isInstance && "token" in value;
    isInstance = isInstance && "tokenType" in value;
    isInstance = isInstance && "tokenFormat" in value;
    isInstance = isInstance && "expiredAt" in value;
    isInstance = isInstance && "createdAt" in value;
    isInstance = isInstance && "fa" in value;

    return isInstance;
}

export function SessionFromJSON(json: any): Session {
    return SessionFromJSONTyped(json, false);
}

export function SessionFromJSONTyped(json: any, ignoreDiscriminator: boolean): Session {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'status': SessionStatusFromJSON(json['status']),
        'account': AccountFromJSON(json['account']),
        'token': json['token'],
        'tokenType': json['tokenType'],
        'tokenFormat': json['tokenFormat'],
        'expiredAt': json['expiredAt'],
        'createdAt': json['createdAt'],
        'fa': json['fa'],
    };
}

export function SessionToJSON(value?: Session | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'status': SessionStatusToJSON(value.status),
        'account': AccountToJSON(value.account),
        'token': value.token,
        'tokenType': value.tokenType,
        'tokenFormat': value.tokenFormat,
        'expiredAt': value.expiredAt,
        'createdAt': value.createdAt,
        'fa': value.fa,
    };
}

