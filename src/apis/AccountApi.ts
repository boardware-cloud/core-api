/* tslint:disable */
/* eslint-disable */
/**
 * BoardWare Cloud APIs
 * BoardWare cloud console api
 *
 * The version of the OpenAPI document: 0.0.12
 * Contact: dan.chen@boardware.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Account,
  AccountList,
  Authentication,
  CreateAccountRequest,
  CreateSessionRequest,
  CreateTicketChallenge,
  Ordering,
  PutTotpRequest,
  Session,
  SessionVerificationRequest,
  Totp,
  UpdatePasswordRequest,
  WebAuthn,
  WebAuthnSession,
} from '../models';
import {
    AccountFromJSON,
    AccountToJSON,
    AccountListFromJSON,
    AccountListToJSON,
    AuthenticationFromJSON,
    AuthenticationToJSON,
    CreateAccountRequestFromJSON,
    CreateAccountRequestToJSON,
    CreateSessionRequestFromJSON,
    CreateSessionRequestToJSON,
    CreateTicketChallengeFromJSON,
    CreateTicketChallengeToJSON,
    OrderingFromJSON,
    OrderingToJSON,
    PutTotpRequestFromJSON,
    PutTotpRequestToJSON,
    SessionFromJSON,
    SessionToJSON,
    SessionVerificationRequestFromJSON,
    SessionVerificationRequestToJSON,
    TotpFromJSON,
    TotpToJSON,
    UpdatePasswordRequestFromJSON,
    UpdatePasswordRequestToJSON,
    WebAuthnFromJSON,
    WebAuthnToJSON,
    WebAuthnSessionFromJSON,
    WebAuthnSessionToJSON,
} from '../models';

export interface CreateAccountOperationRequest {
    createAccountRequest?: CreateAccountRequest;
}

export interface CreateSessionOperationRequest {
    createSessionRequest?: CreateSessionRequest;
}

export interface CreateTotp2FARequest {
    putTotpRequest?: PutTotpRequest;
}

export interface CreateWebauthnRequest {
    id: string;
}

export interface CreateWebauthnTicketChallengeRequest {
    createTicketChallenge?: CreateTicketChallenge;
}

export interface CreateWebauthnTicketsRequest {
    id: string;
}

export interface DeleteWebAuthnRequest {
    id: string;
}

export interface GetAuthenticationRequest {
    email?: string;
}

export interface ListAccountRequest {
    ordering?: Ordering;
    index?: number;
    limit?: number;
}

export interface UpdatePasswordOperationRequest {
    updatePasswordRequest?: UpdatePasswordRequest;
}

export interface VerifySessionRequest {
    sessionVerificationRequest?: SessionVerificationRequest;
}

/**
 * 
 */
export class AccountApi extends runtime.BaseAPI {

    /**
     * Create user account
     */
    async createAccountRaw(requestParameters: CreateAccountOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Account>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/accounts`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateAccountRequestToJSON(requestParameters.createAccountRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AccountFromJSON(jsonValue));
    }

    /**
     * Create user account
     */
    async createAccount(requestParameters: CreateAccountOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Account> {
        const response = await this.createAccountRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create Login session
     */
    async createSessionRaw(requestParameters: CreateSessionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Session>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/account/session`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateSessionRequestToJSON(requestParameters.createSessionRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SessionFromJSON(jsonValue));
    }

    /**
     * Create Login session
     */
    async createSession(requestParameters: CreateSessionOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Session> {
        const response = await this.createSessionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create or Update 2FA of TOTP
     */
    async createTotp2FARaw(requestParameters: CreateTotp2FARequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Totp>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/account/totp`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PutTotpRequestToJSON(requestParameters.putTotpRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TotpFromJSON(jsonValue));
    }

    /**
     * Create or Update 2FA of TOTP
     */
    async createTotp2FA(requestParameters: CreateTotp2FARequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Totp> {
        const response = await this.createTotp2FARaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async createWebAuthnChallengeRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WebAuthnSession>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/account/webauthn/sessions/challenge`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WebAuthnSessionFromJSON(jsonValue));
    }

    /**
     */
    async createWebAuthnChallenge(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WebAuthnSession> {
        const response = await this.createWebAuthnChallengeRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async createWebauthnRaw(requestParameters: CreateWebauthnRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling createWebauthn.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/account/webauthn/sessions/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async createWebauthn(requestParameters: CreateWebauthnRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.createWebauthnRaw(requestParameters, initOverrides);
    }

    /**
     */
    async createWebauthnTicketChallengeRaw(requestParameters: CreateWebauthnTicketChallengeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/account/webauthn/sessions/tickets/challenge`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateTicketChallengeToJSON(requestParameters.createTicketChallenge),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async createWebauthnTicketChallenge(requestParameters: CreateWebauthnTicketChallengeRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.createWebauthnTicketChallengeRaw(requestParameters, initOverrides);
    }

    /**
     */
    async createWebauthnTicketsRaw(requestParameters: CreateWebauthnTicketsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling createWebauthnTickets.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/account/webauthn/sessions/tickets/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async createWebauthnTickets(requestParameters: CreateWebauthnTicketsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.createWebauthnTicketsRaw(requestParameters, initOverrides);
    }

    /**
     */
    async deleteWebAuthnRaw(requestParameters: DeleteWebAuthnRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteWebAuthn.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/account/webauthn/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async deleteWebAuthn(requestParameters: DeleteWebAuthnRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteWebAuthnRaw(requestParameters, initOverrides);
    }

    /**
     * Get account detail
     */
    async getAccountRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Account>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/account`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AccountFromJSON(jsonValue));
    }

    /**
     * Get account detail
     */
    async getAccount(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Account> {
        const response = await this.getAccountRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get account detail
     */
    async getAuthenticationRaw(requestParameters: GetAuthenticationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Authentication>> {
        const queryParameters: any = {};

        if (requestParameters.email !== undefined) {
            queryParameters['email'] = requestParameters.email;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/account/authentication`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthenticationFromJSON(jsonValue));
    }

    /**
     * Get account detail
     */
    async getAuthentication(requestParameters: GetAuthenticationRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Authentication> {
        const response = await this.getAuthenticationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getTotpRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Totp>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/account/totp`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TotpFromJSON(jsonValue));
    }

    /**
     */
    async getTotp(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Totp> {
        const response = await this.getTotpRaw(initOverrides);
        return await response.value();
    }

    /**
     * Create user account
     */
    async listAccountRaw(requestParameters: ListAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AccountList>> {
        const queryParameters: any = {};

        if (requestParameters.ordering !== undefined) {
            queryParameters['ordering'] = requestParameters.ordering;
        }

        if (requestParameters.index !== undefined) {
            queryParameters['index'] = requestParameters.index;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/accounts`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AccountListFromJSON(jsonValue));
    }

    /**
     * Create user account
     */
    async listAccount(requestParameters: ListAccountRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AccountList> {
        const response = await this.listAccountRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async listWebAuthnRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<WebAuthn>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/account/webauthn`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(WebAuthnFromJSON));
    }

    /**
     */
    async listWebAuthn(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<WebAuthn>> {
        const response = await this.listWebAuthnRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async updatePasswordRaw(requestParameters: UpdatePasswordOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/account/password`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdatePasswordRequestToJSON(requestParameters.updatePasswordRequest),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async updatePassword(requestParameters: UpdatePasswordOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.updatePasswordRaw(requestParameters, initOverrides);
    }

    /**
     * Verify jwt
     */
    async verifySessionRaw(requestParameters: VerifySessionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Session>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/accounts/session/verification`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
            body: SessionVerificationRequestToJSON(requestParameters.sessionVerificationRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SessionFromJSON(jsonValue));
    }

    /**
     * Verify jwt
     */
    async verifySession(requestParameters: VerifySessionRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Session> {
        const response = await this.verifySessionRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
