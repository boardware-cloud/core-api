/* tslint:disable */
/* eslint-disable */
/**
 * BoardWare Cloud APIs
 * BoardWare cloud console api
 *
 * The version of the OpenAPI document: 0.0.12
 * Contact: dan.chen@boardware.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Service,
  ServiceList,
} from '../models';
import {
    ServiceFromJSON,
    ServiceToJSON,
    ServiceListFromJSON,
    ServiceListToJSON,
} from '../models';

/**
 * 
 */
export class ServicesApi extends runtime.BaseAPI {

    /**
     * Create service
     */
    async createServiceRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Service>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/services`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ServiceFromJSON(jsonValue));
    }

    /**
     * Create service
     */
    async createService(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Service> {
        const response = await this.createServiceRaw(initOverrides);
        return await response.value();
    }

    /**
     * List services
     */
    async listServicesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ServiceList>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/services`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ServiceListFromJSON(jsonValue));
    }

    /**
     * List services
     */
    async listServices(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ServiceList> {
        const response = await this.listServicesRaw(initOverrides);
        return await response.value();
    }

}
